!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASN1	ASN1.cpp	/^ASN1::ASN1(const vector<uint8_t> &data, size_t offset) :$/;"	f	class:ASN1
ASN1Cert	ASN1cert.cpp	/^ASN1Cert::ASN1Cert(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:ASN1Cert
Alert	Alert.cpp	/^Alert::Alert(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:Alert
CLIENT_STRING	Finished.cpp	/^const string Finished::CLIENT_STRING = "client finished";$/;"	m	class:Finished	file:
Certificate	Certificate.cpp	/^Certificate::Certificate(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:Certificate
CertificateRequest	CertificateRequest.cpp	/^CertificateRequest::CertificateRequest(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:CertificateRequest
ChangeCipherSpec	ChangeCipherSpec.cpp	/^ChangeCipherSpec::ChangeCipherSpec() :$/;"	f	class:ChangeCipherSpec
Cipher	Cipher.cpp	/^Cipher::Cipher(CipherType type) {$/;"	f	class:Cipher
CipherSuite	CipherSuite.cpp	/^CipherSuite::CipherSuite(CipherSuiteType type) :$/;"	f	class:CipherSuite
CipherSuite	CipherSuite.cpp	/^CipherSuite::CipherSuite(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:CipherSuite
ClientDiffieHellmanPublic	ClientDiffieHellmanPublic.cpp	/^ClientDiffieHellmanPublic::ClientDiffieHellmanPublic(const CipherSuite *cipherSuite) :$/;"	f	class:ClientDiffieHellmanPublic
ClientHello	ClientHello.cpp	/^ClientHello::ClientHello() :$/;"	f	class:ClientHello
ClientKeyExchange	ClientKeyExchange.cpp	/^ClientKeyExchange::ClientKeyExchange(const CipherSuite *cipherSuite,$/;"	f	class:ClientKeyExchange
CompressionMethod	CompressionMethod.cpp	/^CompressionMethod::CompressionMethod(Method type) :$/;"	f	class:CompressionMethod
CompressionMethod	CompressionMethod.cpp	/^CompressionMethod::CompressionMethod(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:CompressionMethod
Connection	Connection.cpp	/^Connection::Connection(const string &hostname, bool isSsl) :$/;"	f	class:Connection
DigitallySigned	DigitallySigned.cpp	/^DigitallySigned::DigitallySigned(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:DigitallySigned
Err	Err.cpp	/^Err::Err(ErrType errType, ...) :$/;"	f	class:Err
Extension	Extension.cpp	/^Extension::Extension(ExtensionType type) :$/;"	f	class:Extension
Extension	Extension.cpp	/^Extension::Extension(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:Extension
Finished	Finished.cpp	/^Finished::Finished(SenderType type) :$/;"	f	class:Finished
Handshake	Handshake.cpp	/^Handshake::Handshake(HandshakeType type, const void *arg, const void *arg2) :$/;"	f	class:Handshake
Handshake	Handshake.cpp	/^Handshake::Handshake(const vector<uint8_t> &data, size_t offset, const void *arg) {$/;"	f	class:Handshake
MAC	MAC.cpp	/^MAC::MAC(MACType type) {$/;"	f	class:MAC
ProtocolVersion	ProtocolVersion.cpp	/^ProtocolVersion::ProtocolVersion(const vector<uint8_t> &data, size_t offset){$/;"	f	class:ProtocolVersion
ProtocolVersion	ProtocolVersion.cpp	/^ProtocolVersion::ProtocolVersion(uint8_t major, uint8_t minor) :$/;"	f	class:ProtocolVersion
PublicKey	RSAPublicKey.cpp	/^PublicKey::PublicKey(const std::vector<uint8_t> &modulus, int exponent) :$/;"	f	class:rsa::PublicKey
Random	Random.cpp	/^Random::Random() {$/;"	f	class:Random
Random	Random.cpp	/^Random::Random(const vector<uint8_t> &data, size_t offset){$/;"	f	class:Random
Record	Record.cpp	/^Record::Record(ContentType type) :$/;"	f	class:Record
Record	Record.cpp	/^Record::Record(Handshake::HandshakeType handshakeType, const void *arg, const void *arg2) :$/;"	f	class:Record
Record	Record.cpp	/^Record::Record(const vector<uint8_t> &data, size_t offset, const void *arg) :$/;"	f	class:Record
SERVER_STRING	Finished.cpp	/^const string Finished::SERVER_STRING = "server finished";$/;"	m	class:Finished	file:
ServerDHParams	ServerDHParams.cpp	/^ServerDHParams::ServerDHParams(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:ServerDHParams
ServerHello	ServerHello.cpp	/^ServerHello::ServerHello(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:ServerHello
ServerHelloDone	ServerHelloDone.cpp	/^ServerHelloDone::ServerHelloDone(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:ServerHelloDone
ServerKeyExchange	ServerKeyExchange.cpp	/^ServerKeyExchange::ServerKeyExchange(const CipherSuite *cipherSuite,$/;"	f	class:ServerKeyExchange
SessionID	SessionID.cpp	/^SessionID::SessionID() {$/;"	f	class:SessionID
SessionID	SessionID.cpp	/^SessionID::SessionID(const vector<uint8_t> &data, size_t offset){$/;"	f	class:SessionID
SslWrapper	SslWrapper.cpp	/^SslWrapper::SslWrapper(const Url* url) :$/;"	f	class:SslWrapper
SubConnection	SubConnection.cpp	/^SubConnection::SubConnection(string ip, int port) {$/;"	f	class:SubConnection
Url	Url.cpp	/^Url::Url(const string& link) {$/;"	f	class:Url
addData	Util.cpp	/^void Util::addData(vector<uint8_t> &data, const vector<uint8_t> &toAdd) {$/;"	f	class:Util
addData	Util.cpp	/^void Util::addData(vector<uint8_t> &data, uint16_t value) {$/;"	f	class:Util
addData	Util.cpp	/^void Util::addData(vector<uint8_t> &data, uint32_t value) {$/;"	f	class:Util
addData	Util.cpp	/^void Util::addData(vector<uint8_t> &data, uint64_t value) {$/;"	f	class:Util
addData	Util.cpp	/^void Util::addData(vector<uint8_t> &data, uint8_t value) {$/;"	f	class:Util
addData24	Util.cpp	/^void Util::addData24(vector<uint8_t> &data, uint32_t value) {$/;"	f	class:Util
append	BitUtil.cpp	/^long long BitUtil::append(long long val, long long data, int nBit) {$/;"	f	class:BitUtil
cutLastBits	BitUtil.cpp	/^long long BitUtil::cutLastBits(long long val, int nBit) {$/;"	f	class:BitUtil
doConnect	SubConnection.cpp	/^void SubConnection::doConnect() const{$/;"	f	class:SubConnection
doReceive	SubConnection.cpp	/^vector<uint8_t> SubConnection::doReceive() const{$/;"	f	class:SubConnection
doSend	SubConnection.cpp	/^void SubConnection::doSend(vector<uint8_t> request) const{$/;"	f	class:SubConnection
exponent	CipherCore.cpp	/^std::vector<uint8_t> CipherCore::exponent(const std::vector<uint8_t>& base,$/;"	f	class:CipherCore
filter	BitUtil.cpp	/^long long BitUtil::filter(long long val, int nBit, int lastBitNo) {$/;"	f	class:BitUtil
filterByte	BitUtil.cpp	/^uint8_t BitUtil::filterByte(long long val, int lastBitNo) {$/;"	f	class:BitUtil
filterWord	BitUtil.cpp	/^uint16_t BitUtil::filterWord(long long val, int lastBitNo) {$/;"	f	class:BitUtil
get	SslWrapper.cpp	/^vector<uint8_t> SslWrapper::get() {$/;"	f	class:SslWrapper
getAlert	Record.cpp	/^const Alert *Record::getAlert() const{$/;"	f	class:Record
getAlgorithm	MAC.cpp	/^MAC::Algorithm MAC::getAlgorithm() const{$/;"	f	class:MAC
getBlockSize	Cipher.cpp	/^size_t Cipher::getBlockSize() const{$/;"	f	class:Cipher
getCertificate	Handshake.cpp	/^const Certificate* Handshake::getCertificate() const{$/;"	f	class:Handshake
getCertificateList	Certificate.cpp	/^const vector<ASN1Cert*> &Certificate::getCertificateList() const{$/;"	f	class:Certificate
getCertificateRequest	Handshake.cpp	/^const CertificateRequest* Handshake::getCertificateRequest() const {$/;"	f	class:Handshake
getChangeCipherSpec	Record.cpp	/^const ChangeCipherSpec* Record::getChangeCipherSpec() const {$/;"	f	class:Record
getCipher	CipherSuite.cpp	/^const Cipher *CipherSuite::getCipher() const{$/;"	f	class:CipherSuite
getCipherSuite	ServerHello.cpp	/^const CipherSuite *ServerHello::getCipherSuite() const{$/;"	f	class:ServerHello
getClientHello	Handshake.cpp	/^const ClientHello* Handshake::getClientHello() const {$/;"	f	class:Handshake
getClientKeyExchange	Handshake.cpp	/^const ClientKeyExchange* Handshake::getClientKeyExchange() const {$/;"	f	class:Handshake
getExponent	ASN1cert.cpp	/^int ASN1Cert::getExponent() const {$/;"	f	class:ASN1Cert
getExponent	RSAPublicKey.cpp	/^int rsa::PublicKey::getExponent() const {$/;"	f	class:rsa::PublicKey
getFinished	Handshake.cpp	/^const Finished* Handshake::getFinished() const {$/;"	f	class:Handshake
getFormat	Cipher.cpp	/^Cipher::Format Cipher::getFormat() const{$/;"	f	class:Cipher
getHandshake	Record.cpp	/^const Handshake* Record::getHandshake() const {$/;"	f	class:Record
getHostname	Url.cpp	/^const string &Url::getHostname() const {$/;"	f	class:Url
getIVSize	Cipher.cpp	/^size_t Cipher::getIVSize() const{$/;"	f	class:Cipher
getKeyExchange	CipherSuite.cpp	/^CipherSuite::KeyExchangeType CipherSuite::getKeyExchange() const{$/;"	f	class:CipherSuite
getKeyMaterial	Cipher.cpp	/^int Cipher::getKeyMaterial() const{$/;"	f	class:Cipher
getLink	StrUtil.cpp	/^string StrUtil::getLink(int argc, const char * argv[]){$/;"	f	class:StrUtil
getMac	CipherSuite.cpp	/^const MAC *CipherSuite::getMac() const{$/;"	f	class:CipherSuite
getMacKeyLength	MAC.cpp	/^int MAC::getMacKeyLength() const{$/;"	f	class:MAC
getMacLength	MAC.cpp	/^int MAC::getMacLength() const{$/;"	f	class:MAC
getModulus	RSAPublicKey.cpp	/^const std::vector<uint8_t>& rsa::PublicKey::getModulus() const {$/;"	f	class:rsa::PublicKey
getProtocolVersion	Record.cpp	/^const ProtocolVersion* Record::getProtocolVersion() const {$/;"	f	class:Record
getRSAModulus	ASN1cert.cpp	/^const vector<uint8_t>& ASN1Cert::getRSAModulus() const {$/;"	f	class:ASN1Cert
getRequest	Url.cpp	/^const string &Url::getRequest() const{$/;"	f	class:Url
getServerHello	Handshake.cpp	/^const ServerHello* Handshake::getServerHello() const {$/;"	f	class:Handshake
getServerHelloDone	Handshake.cpp	/^const ServerHelloDone* Handshake::getServerHelloDone() const {$/;"	f	class:Handshake
getServerKeyExchange	Handshake.cpp	/^const ServerKeyExchange* Handshake::getServerKeyExchange() const {$/;"	f	class:Handshake
getType	Handshake.cpp	/^const Handshake::HandshakeType Handshake::getType() const{$/;"	f	class:Handshake
getType	Record.cpp	/^Record::ContentType Record::getType() const {$/;"	f	class:Record
httpGetRequest	Url.cpp	/^vector<uint8_t> Url::httpGetRequest() const {$/;"	f	class:Url
ipListFromHostname	Connection.cpp	/^vector<string> Connection::ipListFromHostname(const string& hostname) {$/;"	f	class:Connection
isAllOne	BitUtil.cpp	/^bool BitUtil::isAllOne(long long val, int nBit, int lastBitNo) {$/;"	f	class:BitUtil
isAllZero	BitUtil.cpp	/^bool BitUtil::isAllZero(long long val, int nBit, int lastBitNo) {$/;"	f	class:BitUtil
isBitOff	BitUtil.cpp	/^bool BitUtil::isBitOff(long long val, int bitNo) {$/;"	f	class:BitUtil
isBitOn	BitUtil.cpp	/^bool BitUtil::isBitOn(long long val, int bitNo) {$/;"	f	class:BitUtil
isCompressed	Record.cpp	/^bool Record::isCompressed() const{$/;"	f	class:Record
isSuccess	Err.cpp	/^bool Err::isSuccess() const{$/;"	f	class:Err
isUseSsl	Url.cpp	/^bool Url::isUseSsl() const {$/;"	f	class:Url
main	main.cpp	/^int main(int argc, const char * argv[]) {$/;"	f
multiple	CipherCore.cpp	/^std::vector<uint8_t> CipherCore::multiple(const std::vector<uint8_t>& left,$/;"	f	class:CipherCore
parseBitString	ASN1.cpp	/^void ASN1::parseBitString(const vector<uint8_t>& data, size_t& offset,$/;"	f	class:ASN1
parseBoolContent	ASN1.cpp	/^void ASN1::parseBoolContent(const vector<uint8_t>& data, size_t& offset) {$/;"	f	class:ASN1
parseContent	ASN1.cpp	/^void ASN1::parseContent(const vector<uint8_t>& data, size_t& offset,$/;"	f	class:ASN1
parseContentLength	ASN1.cpp	/^long long ASN1::parseContentLength(const vector<uint8_t>& data,$/;"	f	class:ASN1
parseObjectIdentifier	ASN1.cpp	/^void ASN1::parseObjectIdentifier(const vector<uint8_t>& data, size_t& offset,$/;"	f	class:ASN1
parseOctetString	ASN1.cpp	/^void ASN1::parseOctetString(const vector<uint8_t>& data, size_t& offset,$/;"	f	class:ASN1
parseRealContent	ASN1.cpp	/^void ASN1::parseRealContent(const vector<uint8_t>& data, size_t& offset,$/;"	f	class:ASN1
parseSequence	ASN1.cpp	/^void ASN1::parseSequence(const vector<uint8_t>& data, size_t& offset,$/;"	f	class:ASN1
parseSet	ASN1.cpp	/^void ASN1::parseSet(const vector<uint8_t>& data, size_t& offset,$/;"	f	class:ASN1
parseTagNumber	ASN1.cpp	/^void ASN1::parseTagNumber(const vector<uint8_t>& data, size_t& offset) {$/;"	f	class:ASN1
parserIntegerContent	ASN1.cpp	/^void ASN1::parserIntegerContent(const vector<uint8_t>& data, size_t& offset,$/;"	f	class:ASN1
readableForm	Util.cpp	/^string Util::readableForm(const vector<uint8_t> &data) {$/;"	f	class:Util
receive	Connection.cpp	/^vector<uint8_t> Connection::receive() const{$/;"	f	class:Connection
rsa	RSAPublicKey.cpp	/^namespace rsa {$/;"	n	file:
rsaep	CipherCore.cpp	/^std::vector<uint8_t> CipherCore::rsaep(const rsa::PublicKey& publicKey,$/;"	f	class:CipherCore
run	Browser.cpp	/^void Browser::run(int argc, const char * argv[]) {$/;"	f	class:Browser
send	Connection.cpp	/^void Connection::send(const vector<uint8_t> &request){$/;"	f	class:Connection
setType	Cipher.cpp	/^void Cipher::setType(CipherType type) {$/;"	f	class:Cipher
setType	CipherSuite.cpp	/^void CipherSuite::setType(CipherSuiteType type) {$/;"	f	class:CipherSuite
setType	MAC.cpp	/^void MAC::setType(MACType type) {$/;"	f	class:MAC
size	ASN1.cpp	/^size_t ASN1::size() {$/;"	f	class:ASN1
size	ASN1cert.cpp	/^size_t ASN1Cert::size() const{$/;"	f	class:ASN1Cert
size	Alert.cpp	/^size_t Alert::size() const{$/;"	f	class:Alert
size	Certificate.cpp	/^size_t Certificate::size() const {$/;"	f	class:Certificate
size	CertificateRequest.cpp	/^size_t CertificateRequest::size()  const{$/;"	f	class:CertificateRequest
size	ChangeCipherSpec.cpp	/^size_t ChangeCipherSpec::size()  const{$/;"	f	class:ChangeCipherSpec
size	CipherSuite.cpp	/^size_t CipherSuite::size() const{$/;"	f	class:CipherSuite
size	ClientDiffieHellmanPublic.cpp	/^size_t ClientDiffieHellmanPublic::size() const{$/;"	f	class:ClientDiffieHellmanPublic
size	ClientHello.cpp	/^size_t ClientHello::size() const{$/;"	f	class:ClientHello
size	ClientKeyExchange.cpp	/^size_t ClientKeyExchange::size() const{$/;"	f	class:ClientKeyExchange
size	CompressionMethod.cpp	/^size_t CompressionMethod::size() const{$/;"	f	class:CompressionMethod
size	DigitallySigned.cpp	/^size_t DigitallySigned::size() const {$/;"	f	class:DigitallySigned
size	Exportable.cpp	/^size_t Exportable::size() const {$/;"	f	class:Exportable
size	Extension.cpp	/^size_t Extension::size() const {$/;"	f	class:Extension
size	Finished.cpp	/^size_t Finished::size() const{$/;"	f	class:Finished
size	Handshake.cpp	/^size_t Handshake::size()const {$/;"	f	class:Handshake
size	PreMasterSecret.cpp	/^size_t PreMasterSecret::size() const{$/;"	f	class:PreMasterSecret
size	ProtocolVersion.cpp	/^size_t ProtocolVersion::size() const{$/;"	f	class:ProtocolVersion
size	Random.cpp	/^size_t Random::size() const{$/;"	f	class:Random
size	Record.cpp	/^size_t Record::size() const {$/;"	f	class:Record
size	ServerDHParams.cpp	/^size_t ServerDHParams::size() const {$/;"	f	class:ServerDHParams
size	ServerHello.cpp	/^size_t ServerHello::size() const {$/;"	f	class:ServerHello
size	ServerHelloDone.cpp	/^size_t ServerHelloDone::size() const {$/;"	f	class:ServerHelloDone
size	ServerKeyExchange.cpp	/^size_t ServerKeyExchange::size() const{$/;"	f	class:ServerKeyExchange
size	SessionID.cpp	/^size_t SessionID::size() const{$/;"	f	class:SessionID
takeData	Util.cpp	/^vector<uint8_t> Util::takeData(const vector<uint8_t> &data, size_t length,$/;"	f	class:Util
takeData16	Util.cpp	/^uint16_t Util::takeData16(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:Util
takeData24	Util.cpp	/^uint32_t Util::takeData24(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:Util
takeData32	Util.cpp	/^uint32_t Util::takeData32(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:Util
takeData64	Util.cpp	/^uint64_t Util::takeData64(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:Util
takeData8	Util.cpp	/^uint8_t Util::takeData8(const vector<uint8_t> &data, size_t offset) {$/;"	f	class:Util
toData	ASN1.cpp	/^vector<uint8_t> ASN1::toData() {$/;"	f	class:ASN1
toData	ASN1cert.cpp	/^vector<uint8_t> ASN1Cert::toData()  const{$/;"	f	class:ASN1Cert
toData	ChangeCipherSpec.cpp	/^vector<uint8_t> ChangeCipherSpec::toData() const{$/;"	f	class:ChangeCipherSpec
toData	CipherSuite.cpp	/^vector<uint8_t> CipherSuite::toData()  const{$/;"	f	class:CipherSuite
toData	ClientDiffieHellmanPublic.cpp	/^vector<uint8_t> ClientDiffieHellmanPublic::toData() const{$/;"	f	class:ClientDiffieHellmanPublic
toData	ClientHello.cpp	/^vector<uint8_t> ClientHello::toData() const{$/;"	f	class:ClientHello
toData	ClientKeyExchange.cpp	/^vector<uint8_t> ClientKeyExchange::toData() const{$/;"	f	class:ClientKeyExchange
toData	CompressionMethod.cpp	/^vector<uint8_t> CompressionMethod::toData() const{$/;"	f	class:CompressionMethod
toData	EncryptedPreMasterSecret.cpp	/^vector<uint8_t> EncryptedPreMasterSecret::toData() const{$/;"	f	class:EncryptedPreMasterSecret
toData	Exportable.cpp	/^vector<uint8_t> Exportable::toData() const{$/;"	f	class:Exportable
toData	Extension.cpp	/^vector<uint8_t> Extension::toData()  const{$/;"	f	class:Extension
toData	Finished.cpp	/^vector<uint8_t> Finished::toData() const{$/;"	f	class:Finished
toData	Handshake.cpp	/^vector<uint8_t> Handshake::toData() const {$/;"	f	class:Handshake
toData	PreMasterSecret.cpp	/^vector<uint8_t> PreMasterSecret::toData() const{$/;"	f	class:PreMasterSecret
toData	ProtocolVersion.cpp	/^vector<uint8_t> ProtocolVersion::toData() const{$/;"	f	class:ProtocolVersion
toData	Random.cpp	/^vector<uint8_t> Random::toData() const{$/;"	f	class:Random
toData	Record.cpp	/^vector<uint8_t> Record::toData() const{$/;"	f	class:Record
toData	SessionID.cpp	/^vector<uint8_t> SessionID::toData() const {$/;"	f	class:SessionID
turnBitOff	BitUtil.cpp	/^long long BitUtil::turnBitOff(long long val, int bitNo) {$/;"	f	class:BitUtil
turnBitOn	BitUtil.cpp	/^long long BitUtil::turnBitOn(long long val, int bitNo) {$/;"	f	class:BitUtil
what	Err.cpp	/^const char *Err::what() const throw(){$/;"	f	class:Err
writeToFile	Util.cpp	/^void Util::writeToFile(const string &filename, const vector<uint8_t> &data) {$/;"	f	class:Util
~ASN1	ASN1.cpp	/^ASN1::~ASN1() {$/;"	f	class:ASN1
~Certificate	Certificate.cpp	/^Certificate::~Certificate() {$/;"	f	class:Certificate
~CertificateRequest	CertificateRequest.cpp	/^CertificateRequest::~CertificateRequest() {$/;"	f	class:CertificateRequest
~ChangeCipherSpec	ChangeCipherSpec.cpp	/^ChangeCipherSpec::~ChangeCipherSpec() {$/;"	f	class:ChangeCipherSpec
~CipherSuite	CipherSuite.cpp	/^CipherSuite::~CipherSuite() {$/;"	f	class:CipherSuite
~ClientDiffieHellmanPublic	ClientDiffieHellmanPublic.cpp	/^ClientDiffieHellmanPublic::~ClientDiffieHellmanPublic() {$/;"	f	class:ClientDiffieHellmanPublic
~ClientHello	ClientHello.cpp	/^ClientHello::~ClientHello() {$/;"	f	class:ClientHello
~ClientKeyExchange	ClientKeyExchange.cpp	/^ClientKeyExchange::~ClientKeyExchange() {$/;"	f	class:ClientKeyExchange
~Connection	Connection.cpp	/^Connection::~Connection() {$/;"	f	class:Connection
~DigitallySigned	DigitallySigned.cpp	/^DigitallySigned::~DigitallySigned() {$/;"	f	class:DigitallySigned
~Err	Err.cpp	/^Err::~Err() throw(){$/;"	f	class:Err
~Exportable	Exportable.cpp	/^Exportable::~Exportable() {$/;"	f	class:Exportable
~Finished	Finished.cpp	/^Finished::~Finished() {$/;"	f	class:Finished
~Handshake	Handshake.cpp	/^Handshake::~Handshake() {$/;"	f	class:Handshake
~Record	Record.cpp	/^Record::~Record() {$/;"	f	class:Record
~ServerHello	ServerHello.cpp	/^ServerHello::~ServerHello() {$/;"	f	class:ServerHello
~ServerHelloDone	ServerHelloDone.cpp	/^ServerHelloDone::~ServerHelloDone() {$/;"	f	class:ServerHelloDone
~ServerKeyExchange	ServerKeyExchange.cpp	/^ServerKeyExchange::~ServerKeyExchange() {$/;"	f	class:ServerKeyExchange
~SessionID	SessionID.cpp	/^SessionID::~SessionID() {$/;"	f	class:SessionID
~SslWrapper	SslWrapper.cpp	/^SslWrapper::~SslWrapper() {$/;"	f	class:SslWrapper
